name: Security and Dependencies

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/*.csproj'
      - '.github/workflows/security.yml'

jobs:
  rust-security:
    name: Rust Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-audit-
    
    - name: Install cargo-audit
      run: |
        cargo install cargo-audit --locked || true
    
    - name: Run security audit
      run: |
        cargo audit --deny warnings
    
    - name: Create issue for vulnerabilities
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = 'ðŸš¨ Security vulnerabilities found in Rust dependencies';
          const body = `Security audit failed. Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
          
          Run \`cargo audit\` locally to see the vulnerabilities.`;
          
          // Check if issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security', 'dependencies'],
            state: 'open'
          });
          
          const existingIssue = issues.data.find(issue => issue.title === title);
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'dependencies', 'rust']
            });
          }

  rust-outdated:
    name: Check Outdated Rust Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-outdated
      run: |
        cargo install cargo-outdated --locked || true
    
    - name: Check outdated dependencies
      id: outdated
      run: |
        echo "## Outdated Rust Dependencies" >> outdated.md
        echo '```' >> outdated.md
        cargo outdated --root-deps-only >> outdated.md || true
        echo '```' >> outdated.md
        
        # Also check workspace members
        echo "## Workspace Members" >> outdated.md
        echo '```' >> outdated.md
        cargo outdated --workspace >> outdated.md || true
        echo '```' >> outdated.md
    
    - name: Upload outdated report
      uses: actions/upload-artifact@v4
      with:
        name: rust-outdated-report
        path: outdated.md

  dotnet-security:
    name: .NET Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '7.0.x'
    
    - name: Restore dependencies
      working-directory: sdks/GoudEngine
      run: dotnet restore
    
    - name: Run .NET security scan
      working-directory: sdks/GoudEngine
      run: |
        dotnet list package --vulnerable --include-transitive > vulnerable.txt
        
        if grep -q "has the following vulnerable packages" vulnerable.txt; then
          echo "Vulnerable packages found!"
          cat vulnerable.txt
          exit 1
        else
          echo "No vulnerable packages found."
        fi
    
    - name: Check for outdated packages
      working-directory: sdks/GoudEngine
      run: |
        echo "## Outdated .NET Packages" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        dotnet list package --outdated >> $GITHUB_STEP_SUMMARY || true
        echo '```' >> $GITHUB_STEP_SUMMARY

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        deny-licenses: GPL-3.0, AGPL-3.0
        
  create-summary:
    name: Create Security Summary
    needs: [rust-security, rust-outdated, dotnet-security]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download outdated report
      uses: actions/download-artifact@v4
      with:
        name: rust-outdated-report
        path: .
      continue-on-error: true
    
    - name: Create summary
      run: |
        echo "# Security and Dependency Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Status" >> $GITHUB_STEP_SUMMARY
        echo "- Rust Security: ${{ needs.rust-security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Rust Outdated: ${{ needs.rust-outdated.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- .NET Security: ${{ needs.dotnet-security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f outdated.md ]; then
          cat outdated.md >> $GITHUB_STEP_SUMMARY
        fi